[
  {
    "objectID": "slides.html#what-is-larger-than-memory-data",
    "href": "slides.html#what-is-larger-than-memory-data",
    "title": "Efficiently Engineering Bigger Data with Arrow",
    "section": "What is larger-than-memory data?",
    "text": "What is larger-than-memory data?\n\nSource: July 2023 data from https://store.steampowered.com/hwsurvey/Steam-Hardware-Software-Survey-Welcome-to-Steam"
  },
  {
    "objectID": "slides.html#goals",
    "href": "slides.html#goals",
    "title": "Efficiently Engineering Bigger Data with Arrow",
    "section": "Goals",
    "text": "Goals\nAvoiding these! Butâ€¦donâ€™t worry!"
  },
  {
    "objectID": "slides.html#nyc-taxi-dataset",
    "href": "slides.html#nyc-taxi-dataset",
    "title": "Efficiently Engineering Bigger Data with Arrow",
    "section": "NYC Taxi Dataset",
    "text": "NYC Taxi Dataset\n\n\nhttps://www.nyc.gov/site/tlc/about/tlc-trip-record-data.page"
  },
  {
    "objectID": "slides.html#nyc-taxi-data",
    "href": "slides.html#nyc-taxi-data",
    "title": "Efficiently Engineering Bigger Data with Arrow",
    "section": "NYC Taxi Data",
    "text": "NYC Taxi Data\n\nSubset of the NYC Taxi data set on S3 (~40GBs on disk)\n\n\nlibrary(arrow)\nlibrary(dplyr)\n\nopen_dataset(\"s3://voltrondata-labs-datasets/nyc-taxi\") |&gt;\n  filter(year %in% 2012:2021) |&gt;\n  write_dataset(\"data/nyc-taxi\", partitioning = c(\"year\", \"month\"))"
  },
  {
    "objectID": "slides.html#demo-1",
    "href": "slides.html#demo-1",
    "title": "Efficiently Engineering Bigger Data with Arrow",
    "section": "Demo 1",
    "text": "Demo 1"
  },
  {
    "objectID": "slides.html#nyc-taxi-dataset-1",
    "href": "slides.html#nyc-taxi-dataset-1",
    "title": "Efficiently Engineering Bigger Data with Arrow",
    "section": "NYC Taxi Dataset",
    "text": "NYC Taxi Dataset\n\nlibrary(arrow)\nnyc_taxi &lt;- open_dataset(\"~/data/nyc-taxi/\")\n\nnyc_taxi |&gt; \n  nrow()\n\n[1] 1155795912\n\n\n\n1.15 billion rows!"
  },
  {
    "objectID": "slides.html#nyc-taxi-dataset-a-dplyr-pipeline",
    "href": "slides.html#nyc-taxi-dataset-a-dplyr-pipeline",
    "title": "Efficiently Engineering Bigger Data with Arrow",
    "section": "NYC Taxi Dataset: A {dplyr} pipeline",
    "text": "NYC Taxi Dataset: A {dplyr} pipeline\n\nlibrary(dplyr)\nlibrary(tictoc)\n\ntic()\nnyc_taxi |&gt;\n  group_by(year) |&gt;\n  summarise(\n    all_trips = n(),\n    shared_trips = sum(passenger_count &gt; 1, na.rm = TRUE)\n  ) |&gt;\n  mutate(pct_shared = shared_trips / all_trips * 100) |&gt;\n  collect()\ntoc()\n\n\n6.077 sec elapsed"
  },
  {
    "objectID": "slides.html#apache-arrow-specification",
    "href": "slides.html#apache-arrow-specification",
    "title": "Efficiently Engineering Bigger Data with Arrow",
    "section": "Apache Arrow Specification",
    "text": "Apache Arrow Specification\nIn-memory columnar format: a standardized, language-agnostic specification for representing structured, table-like data sets in-memory."
  },
  {
    "objectID": "slides.html#a-multi-language-toolbox",
    "href": "slides.html#a-multi-language-toolbox",
    "title": "Efficiently Engineering Bigger Data with Arrow",
    "section": "A Multi-Language Toolbox",
    "text": "A Multi-Language Toolbox"
  },
  {
    "objectID": "slides.html#accelerated-data-interchange",
    "href": "slides.html#accelerated-data-interchange",
    "title": "Efficiently Engineering Bigger Data with Arrow",
    "section": "Accelerated Data Interchange",
    "text": "Accelerated Data Interchange"
  },
  {
    "objectID": "slides.html#accelerated-in-memory-processing",
    "href": "slides.html#accelerated-in-memory-processing",
    "title": "Efficiently Engineering Bigger Data with Arrow",
    "section": "Accelerated In-Memory Processing",
    "text": "Accelerated In-Memory Processing\nArrowâ€™s Columnar Format is Fast\n\n\nThe contiguous columnar layout enables vectorization using the latest SIMD (Single Instruction, Multiple Data) operations included in modern processors."
  },
  {
    "objectID": "slides.html#arrow",
    "href": "slides.html#arrow",
    "title": "Efficiently Engineering Bigger Data with Arrow",
    "section": "arrow ðŸ“¦",
    "text": "arrow ðŸ“¦"
  },
  {
    "objectID": "slides.html#arrow-supports-complex-expressions",
    "href": "slides.html#arrow-supports-complex-expressions",
    "title": "Efficiently Engineering Bigger Data with Arrow",
    "section": "arrow supports complex expressions",
    "text": "arrow supports complex expressions\nBindings to functions from lubridate, stringr, and others\n\nnyc_taxi |&gt;\n  mutate(\n    pickup_morning = lubridate::am(pickup_datetime), \n    across(ends_with(\"amount\"), list(pounds = ~.x * 0.79)) \n  ) |&gt;\n  filter(\n    stringr::str_ends(vendor_name, \"S\"),\n    year == 2019,\n    month == 9\n  ) |&gt;\n  select(\n    pickup_morning,\n    contains(\"amount\"),\n    everything()\n  ) |&gt;\n  head() |&gt;\n  collect()\n\n# A tibble: 6 Ã— 29\n  pickup_morning fare_amount tip_amount tolls_amount total_amount\n  &lt;lgl&gt;                &lt;dbl&gt;      &lt;dbl&gt;        &lt;dbl&gt;        &lt;dbl&gt;\n1 TRUE                  27          0           6.12         36.9\n2 TRUE                  68.5       23.2        20.6         116. \n3 TRUE                  25.5        0           0            26.8\n4 TRUE                  51.5        0           0            52.8\n5 TRUE                  52          0           0            55.3\n6 TRUE                   7          2           0            12.8\n# â„¹ 24 more variables: fare_amount_pounds &lt;dbl&gt;, tip_amount_pounds &lt;dbl&gt;,\n#   tolls_amount_pounds &lt;dbl&gt;, total_amount_pounds &lt;dbl&gt;, vendor_name &lt;chr&gt;,\n#   pickup_datetime &lt;dttm&gt;, dropoff_datetime &lt;dttm&gt;, passenger_count &lt;int&gt;,\n#   trip_distance &lt;dbl&gt;, pickup_longitude &lt;dbl&gt;, pickup_latitude &lt;dbl&gt;,\n#   rate_code &lt;chr&gt;, store_and_fwd &lt;chr&gt;, dropoff_longitude &lt;dbl&gt;,\n#   dropoff_latitude &lt;dbl&gt;, payment_type &lt;chr&gt;, extra &lt;dbl&gt;, mta_tax &lt;dbl&gt;,\n#   improvement_surcharge &lt;dbl&gt;, congestion_surcharge &lt;dbl&gt;, â€¦"
  },
  {
    "objectID": "slides.html#head-to-the-docs",
    "href": "slides.html#head-to-the-docs",
    "title": "Efficiently Engineering Bigger Data with Arrow",
    "section": "head to the docs!",
    "text": "head to the docs!\n\n?`arrow-dplyr`"
  },
  {
    "objectID": "slides.html#duckdb",
    "href": "slides.html#duckdb",
    "title": "Efficiently Engineering Bigger Data with Arrow",
    "section": "DuckDB",
    "text": "DuckDB"
  },
  {
    "objectID": "slides.html#arrow-datasets",
    "href": "slides.html#arrow-datasets",
    "title": "Efficiently Engineering Bigger Data with Arrow",
    "section": "Arrow Datasets",
    "text": "Arrow Datasets\n\nSimilar to database connections\nCan consist of multiple files\nLazy evaluation"
  },
  {
    "objectID": "slides.html#arrow-dataset-objects",
    "href": "slides.html#arrow-dataset-objects",
    "title": "Efficiently Engineering Bigger Data with Arrow",
    "section": "Arrow Dataset Objects",
    "text": "Arrow Dataset Objects"
  },
  {
    "objectID": "slides.html#lets-compare",
    "href": "slides.html#lets-compare",
    "title": "Efficiently Engineering Bigger Data with Arrow",
    "section": "Letâ€™s compare!",
    "text": "Letâ€™s compare!\n\nnyc_taxi |&gt;\n  write_dataset(\n    \"~/data/nyc-taxi-csv\",\n    format = \"csv\", \n    partitioning = c(\"year\", \"month\")\n  )"
  },
  {
    "objectID": "slides.html#comparing-size-on-disk",
    "href": "slides.html#comparing-size-on-disk",
    "title": "Efficiently Engineering Bigger Data with Arrow",
    "section": "Comparing size on disk",
    "text": "Comparing size on disk\n\ntotal_file_size &lt;- function(path){\n  all_files_in_dir &lt;- fs::dir_ls(path, recurse = TRUE)\n  sum(fs::file_size(all_files_in_dir))\n}"
  },
  {
    "objectID": "slides.html#how-much-space-do-the-csv-and-parquet-versions-of-the-same-files-take-up-on-disk",
    "href": "slides.html#how-much-space-do-the-csv-and-parquet-versions-of-the-same-files-take-up-on-disk",
    "title": "Efficiently Engineering Bigger Data with Arrow",
    "section": "How much space do the CSV and Parquet versions of the same files take up on disk?",
    "text": "How much space do the CSV and Parquet versions of the same files take up on disk?\n\n# Parquet files\ntotal_file_size(\"~/data/nyc-taxi/\")\n\n37.5G\n\n\n\n# CSV files\ntotal_file_size(\"~/data/nyc-taxi-csv/\")\n\n158G"
  },
  {
    "objectID": "slides.html#comparing-analysis-speed---parquet",
    "href": "slides.html#comparing-analysis-speed---parquet",
    "title": "Efficiently Engineering Bigger Data with Arrow",
    "section": "Comparing analysis speed - Parquet",
    "text": "Comparing analysis speed - Parquet\n\n# Parquet\ntic()\nopen_dataset(\"~/data/nyc-taxi\") |&gt;\n  filter(year %in% 2014:2017) |&gt;\n  group_by(year) |&gt;\n  summarise(\n    all_trips = n(),\n    shared_trips = sum(passenger_count &gt; 1, na.rm = TRUE)\n  ) |&gt;\n  mutate(pct_shared = shared_trips / all_trips * 100) |&gt;\n  collect()\ntoc()\n\n\n2.54 sec elapsed"
  },
  {
    "objectID": "slides.html#comparing-analysis-speed---csv",
    "href": "slides.html#comparing-analysis-speed---csv",
    "title": "Efficiently Engineering Bigger Data with Arrow",
    "section": "Comparing analysis speed - CSV",
    "text": "Comparing analysis speed - CSV\n\n#CSV\ntic()\nopen_dataset(\"~/data/nyc-taxi-csv\", format = \"csv\") |&gt;\n  filter(year %in% 2014:2017) |&gt;\n  group_by(year) |&gt;\n  summarise(\n    all_trips = n(),\n    shared_trips = sum(passenger_count &gt; 1, na.rm = TRUE)\n  ) |&gt;\n  mutate(pct_shared = shared_trips / all_trips * 100) |&gt;\n  collect()\ntoc()\n\n\n49.788 sec elapsed"
  },
  {
    "objectID": "slides.html#parquet-file-metadata",
    "href": "slides.html#parquet-file-metadata",
    "title": "Efficiently Engineering Bigger Data with Arrow",
    "section": "Parquet file metadata",
    "text": "Parquet file metadata\n\nSource: https://parquet.apache.org/docs/file-format/metadata/"
  },
  {
    "objectID": "slides.html#what-variables-should-we-use-for-partitioning",
    "href": "slides.html#what-variables-should-we-use-for-partitioning",
    "title": "Efficiently Engineering Bigger Data with Arrow",
    "section": "What variables should we use for partitioning?",
    "text": "What variables should we use for partitioning?\nWhat happens if we just partition by year and not month?\n\nnyc_taxi |&gt;\n  write_dataset(\"~/data/nyc-taxi-year\", partitioning = \"year\")\n\nLetâ€™s compare!\n\nyear_part &lt;- open_dataset(\"~/data/nyc-taxi-year\")\nyear_month_part &lt;- open_dataset(\"~/data/nyc-taxi\")"
  },
  {
    "objectID": "slides.html#partitioned-by-year",
    "href": "slides.html#partitioned-by-year",
    "title": "Efficiently Engineering Bigger Data with Arrow",
    "section": "Partitioned by year",
    "text": "Partitioned by year\n\ntic()\n year_part |&gt;\n filter(year %in% 2014:2017) |&gt;\n  group_by(year, month) |&gt;\n  summarise(\n    all_trips = n(),\n    shared_trips = sum(passenger_count &gt; 1, na.rm = TRUE)\n  ) |&gt;\n  mutate(pct_shared = shared_trips / all_trips * 100) |&gt;\n  collect()\ntoc()\n\n\n8.338 sec elapsed"
  },
  {
    "objectID": "slides.html#partitioned-by-both-month-and-year",
    "href": "slides.html#partitioned-by-both-month-and-year",
    "title": "Efficiently Engineering Bigger Data with Arrow",
    "section": "Partitioned by both month and year",
    "text": "Partitioned by both month and year\n\ntic()\n year_month_part |&gt;\n filter(year %in% 2014:2017) |&gt;\n  group_by(year, month) |&gt;\n  summarise(\n    all_trips = n(),\n    shared_trips = sum(passenger_count &gt; 1, na.rm = TRUE)\n  ) |&gt;\n  mutate(pct_shared = shared_trips / all_trips * 100) |&gt;\n  collect()\ntoc()\n\n\n5.621 sec elapsed"
  },
  {
    "objectID": "slides.html#art-science-of-partitioning",
    "href": "slides.html#art-science-of-partitioning",
    "title": "Efficiently Engineering Bigger Data with Arrow",
    "section": "Art & Science of Partitioning",
    "text": "Art & Science of Partitioning\n\nNumber of partitions also important (Arrow reads the metadata of each file)\navoid files &lt; 20MB and &gt; 2GB\navoid &gt; 10,000 files (ðŸ¤¯)\npartition on variables used in filter()"
  },
  {
    "objectID": "slides.html#docs",
    "href": "slides.html#docs",
    "title": "Efficiently Engineering Bigger Data with Arrow",
    "section": "Docs",
    "text": "Docs\n\nhttps://arrow.apache.org/docs/r/"
  },
  {
    "objectID": "slides.html#cookbook",
    "href": "slides.html#cookbook",
    "title": "Efficiently Engineering Bigger Data with Arrow",
    "section": "Cookbook",
    "text": "Cookbook\n\nhttps://arrow.apache.org/cookbook/r/"
  },
  {
    "objectID": "slides.html#cheatsheet",
    "href": "slides.html#cheatsheet",
    "title": "Efficiently Engineering Bigger Data with Arrow",
    "section": "Cheatsheet",
    "text": "Cheatsheet\n\nhttps://github.com/apache/arrow/blob/main/r/cheatsheet/arrow-cheatsheet.pdf"
  },
  {
    "objectID": "slides.html#positconf-2023-tutorial",
    "href": "slides.html#positconf-2023-tutorial",
    "title": "Efficiently Engineering Bigger Data with Arrow",
    "section": "posit::conf 2023 tutorial",
    "text": "posit::conf 2023 tutorial\n\nhttps://posit-conf-2023.github.io/arrow/"
  },
  {
    "objectID": "slides.html#awesome-arrow",
    "href": "slides.html#awesome-arrow",
    "title": "Efficiently Engineering Bigger Data with Arrow",
    "section": "Awesome Arrow",
    "text": "Awesome Arrow\n\nhttps://github.com/thisisnic/awesome-arrow-r"
  },
  {
    "objectID": "slides.html#open-an-issue",
    "href": "slides.html#open-an-issue",
    "title": "Efficiently Engineering Bigger Data with Arrow",
    "section": "Open an issue",
    "text": "Open an issue\n\nhttps://github.com/apache/arrow/issues/"
  },
  {
    "objectID": "slides.html#make-a-pr",
    "href": "slides.html#make-a-pr",
    "title": "Efficiently Engineering Bigger Data with Arrow",
    "section": "Make a PR!",
    "text": "Make a PR!\n\ndocs\ncookbook\ncode"
  }
]